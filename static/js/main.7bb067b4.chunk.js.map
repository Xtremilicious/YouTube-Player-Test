{"version":3,"sources":["components/Navbar.js","components/Playlist.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","state","input","updateInput","event","preventDefault","query","target","value","console","log","setState","handleInput","test","videos","includes","dispatch","type","bind","className","this","onChange","onClick","Component","connect","Playlist","url","length","playing","controls","onEnded","map","video","index","key","intialState","store","createStore","action","slice","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kUAIMA,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAGRC,MAAQ,CACNC,MAAO,IALU,EAQnBC,YAAc,SAAAC,GACZA,EAAMC,iBACN,IAAMC,EAAQF,EAAMG,OAAOC,MAC3BC,QAAQC,IAAIJ,GACZ,EAAKK,UAAS,WACZ,MAAO,CACLT,MAAOI,OAdM,EAmBnBM,YAAc,SAAAN,IAGG,IAFH,sFACOO,KAAKP,GAEtB,EAAKK,SAAS,CACZT,MAAO,iBAEA,EAAKF,MAAMc,OAAOC,SAAST,GACpC,EAAKK,SAAS,CACZT,MAAO,mBAGT,EAAKF,MAAMgB,SAAS,CAAEC,KAAM,cAAeT,MAAOF,KA7BpD,EAAKH,YAAc,EAAKA,YAAYe,KAAjB,gBAFF,E,sEAmCT,IAAD,OACP,OACE,yBAAKC,UAAU,2BACb,yBAAKA,UAAU,+CAAf,sBACsB,KAEtB,yBAAKA,UAAU,SACb,yBAAKA,UAAU,aACb,2BACEA,UAAU,aACVF,KAAK,OACLT,MAAOY,KAAKnB,MAAMC,MAClBmB,SAAUD,KAAKjB,cAEjB,4BACEgB,UAAU,aACVG,QAAS,kBAAM,EAAKV,YAAY,EAAKX,MAAMC,SAF7C,c,GAlDSqB,aAkENC,eAHS,SAAAvB,GAAK,MAAK,CAChCa,OAAQb,EAAMa,UAEDU,CAAyBzB,G,iBCjElC0B,E,iLACM,IAAD,OACDX,EAASM,KAAKpB,MAAMc,OACpBY,EAAMN,KAAKpB,MAAM0B,IAOvB,OACE,yBAAKP,UAAU,4BACZL,EAAOa,QAAU,EAChB,yBAAKR,UAAU,mBACb,wCACA,kDAEQ,KAARO,EACF,yBAAKP,UAAU,mBACb,sCACQ,uBAAGA,UAAU,eADrB,iCAKF,kBAAC,IAAD,CACEA,UAAU,mBACVO,IAAKA,EACLE,SAAS,EACTC,UAAU,EACVC,QAAS,WArBf,EAAK9B,MAAMgB,SAAS,CAAEC,KAAM,YAyB1B,yBAAKE,UAAU,0BACb,yBAAKA,UAAU,kBACZL,EAAOiB,KAAI,SAACC,EAAOC,GAClB,OACE,yBAAKC,IAAKD,EAAOd,UAAU,iBAA3B,QACQc,EAAQ,OAKtB,yBAAKd,UAAU,+DACb,4BAAQG,QAAS,WAvCvB,EAAKtB,MAAMgB,SAAS,CAAEC,KAAM,UAuCSE,UAAU,QACvC,uBAAGA,UAAU,eADf,sB,GA5CWI,aAyDRC,eAJS,SAAAvB,GAAK,MAAK,CAChCa,OAAQb,EAAMa,OACdY,IAAKzB,EAAMyB,OAEEF,CAAyBC,G,QCrDlCU,EAAc,CAClBrB,OAAQ,CACN,8CACA,+CAEFY,IAAK,IA8BDU,EAAQC,aA3BE,WAAkC,IAAjCpC,EAAgC,uDAAxBkC,EAAaG,EAAW,uCAC/C,MAAoB,SAAhBA,EAAOrB,KACF,CACLH,OAAQb,EAAMa,OACdY,IAAKzB,EAAMa,OAAO,IAEK,SAAhBwB,EAAOrB,KACT,CACLS,IAAKzB,EAAMa,OAAO,GAClBA,OAAQb,EAAMa,OAAOyB,MAAM,IAEJ,gBAAhBD,EAAOrB,KACZhB,EAAMa,OAAOa,QAAU,EAClB,CACLD,IAAK,GACLZ,OAAQ,CAACwB,EAAO9B,QAGX,CACLM,OAAO,GAAD,mBAAMb,EAAMa,QAAZ,CAAoBwB,EAAO9B,QACjCkB,IAAKzB,EAAMyB,KAIRzB,KAKUuC,E,iLAEjB,OACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,yBAAKjB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GANuBI,aClCbkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7bb067b4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Navbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.updateInput = this.updateInput.bind(this);\r\n  }\r\n  state = {\r\n    input: \"\"\r\n  };\r\n\r\n  updateInput = event => {\r\n    event.preventDefault();\r\n    const query = event.target.value;\r\n    console.log(query);\r\n    this.setState(() => {\r\n      return {\r\n        input: query\r\n      };\r\n    });\r\n  };\r\n\r\n  handleInput = query => {\r\n    let regex = /^(http(s)??:\\/\\/)?(www\\.)?((youtube\\.com\\/watch\\?v=)|(youtu.be\\/))([a-zA-Z0-9\\-_])+/;\r\n    let result = regex.test(query);\r\n    if (result === false) {\r\n      this.setState({\r\n        input: \"Invalid URL!\"\r\n      });\r\n    } else if (this.props.videos.includes(query)) {\r\n      this.setState({\r\n        input: \"Duplicate URL!\"\r\n      });\r\n    } else {\r\n      this.props.dispatch({ type: \"HANDLEINPUT\", value: query });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar row link-bar m-0\">\r\n        <div className=\"col-6 title-text d-flex justify-content-end\">\r\n          Add a YouTube Link:{\" \"}\r\n        </div>\r\n        <div className=\"col-6\">\r\n          <div className=\"input-bar\">\r\n            <input\r\n              className=\"input-area\"\r\n              type=\"text\"\r\n              value={this.state.input}\r\n              onChange={this.updateInput}\r\n            ></input>\r\n            <button\r\n              className=\"add-button\"\r\n              onClick={() => this.handleInput(this.state.input)}\r\n            >\r\n              Add\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  videos: state.videos\r\n});\r\nexport default connect(mapStateToProps)(Navbar);\r\n","import React, { Component } from \"react\";\r\nimport ReactPlayer from \"react-player\";\r\nimport \"../App.css\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Playlist extends Component {\r\n  render() {\r\n    const videos = this.props.videos;\r\n    const url = this.props.url;\r\n    const play = () => {\r\n      this.props.dispatch({ type: \"PLAY\" });\r\n    };\r\n    const next = event => {\r\n      this.props.dispatch({ type: \"NEXT\" });\r\n    };\r\n    return (\r\n      <div className=\"row player-container m-0\">\r\n        {videos.length <= 0 ? (\r\n          <div className=\"col-8 p-0 empty\">\r\n            <div>Empty:(</div>\r\n            <div>Add a few videos</div>\r\n          </div>\r\n        ) : url === \"\" ? (\r\n          <div className=\"col-8 p-0 empty\">\r\n            <div>\r\n              Click <i className=\"fa fa-play\"></i>Play to start playing videos\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <ReactPlayer\r\n            className=\"col-8 p-0 player\"\r\n            url={url}\r\n            playing={true}\r\n            controls={true}\r\n            onEnded={() => next()}\r\n          />\r\n        )}\r\n\r\n        <div className=\"col-4 playlist m-0 p-0\">\r\n          <div className=\"playlist-items\">\r\n            {videos.map((video, index) => {\r\n              return (\r\n                <div key={index} className=\"video-element\">\r\n                  Link {index + 1}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"play-pause d-flex justify-content-center align-items-center\">\r\n            <button onClick={() => play()} className=\"play\">\r\n              <i className=\"fa fa-play\"></i>Play Videos\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => ({\r\n  videos: state.videos,\r\n  url: state.url\r\n});\r\nexport default connect(mapStateToProps)(Playlist);\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./components/Navbar\";\nimport Navbar from \"./components/Navbar\";\nimport Playlist from \"./components/Playlist\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nconst intialState = {\n  videos: [\n    \"https://www.youtube.com/watch?v=QSvaCSt8ixs\",\n    \"https://www.youtube.com/watch?v=w4sDjL-U_mc\"\n  ],\n  url: \"\"\n};\n\nconst reducer = (state = intialState, action) => {\n  if (action.type === \"PLAY\") {\n    return {\n      videos: state.videos,\n      url: state.videos[0]\n    };\n  } else if (action.type === \"NEXT\") {\n    return {\n      url: state.videos[1],\n      videos: state.videos.slice(1)\n    };\n  } else if (action.type === \"HANDLEINPUT\") {\n    if (state.videos.length <= 0) {\n      return {\n        url: \"\",\n        videos: [action.value]\n      };\n    } else {\n      return {\n        videos: [...state.videos, action.value],\n        url: state.url\n      };\n    }\n  } else {\n    return state;\n  }\n};\nconst store = createStore(reducer);\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"app\">\n          <Navbar />\n          <Playlist />\n        </div>\n      </Provider>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}